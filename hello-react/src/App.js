// js import 키워드를 사용하는데 탈 웹 브라우저,,
// 즉 로컬에서 자바스크립트를 이용한다
// node -> 리액트 프로그램생성 -> 그 프로젝트 내에서, 특정기능 (npm)설치 가능.
// import logo from "./logo.svg";
import React, { Fragment } from 'react';
import logo from './logo.svg';
import './App.css';

function App() {
  // JSX 문법 모양소개 -> JavaScript eXtened , 자바스크립트 확장된 문법.
  // return 이라는 키워드 아래에, html 태그들이 사용되고 있음.
  // return (
  //   <div className="App">
  //     <header className="App-header">
  //       <img src={logo} className="App-logo" alt="logo" />
  //       <p>
  //         Edit <code>src/App.js</code> and save to reload.
  //       </p>
  //       <a
  //         className="App-link"
  //         href="https://reactjs.org"
  //         target="_blank"
  //         rel="noopener noreferrer"
  //       >
  //         Learn React
  //       </a>
  //     </header>
  //   </div>
  // );
  // ================================================================================================
  // return React.createElement(
  //   "div",
  //   null,
  //   "Hello, ",
  //   React.createElement("b", null, "react")
  // );
  // ================================================================================================
  // return (
  //   <div>
  //     Hello, <b>bitch</b>
  //   </div>
  // );
  // ================================================================================================
  // return (
  //   <Fragment>
  //     Hello, <b>bitch</b>
  //   </Fragment>
  // );
  // ================================================================================================
  // const name = "김경태";
  // return (
  //   <>
  //     <h1>Hello, {name} </h1>
  //     <b>bitch</b>
  //   </>
  // );
  // ================================================================================================
  // if 대신에 jsx에서 조건부 연산자 이용
  // const :  상수처럼 사용, 안드로이드 val
  // let : 변수처럼 사용, 안드로이드 var
  // const name = "김경태";
  // //{조건식 ? (참 일 때 실행 될 문장) : (거짓 일 때 실행 될 문장)}
  // return (
  //   <>
  //     {name === "김경태2" ? <h1>김경태가 맛다</h1> : <h1>김경태가 아니다</h1>}
  //   </>
  // );
  // ================================================================================================
  // 화면에 아무것도 출력을 하지 않을 때 , null 사용하면 된다.
  // const name = "김경태";
  // return (
  //   <>
  //     {name === "김경태2" ? <h1>김경태가 맛다</h1> : null}
  //   </>
  // );
  // ================================================================================================
  // // && 2가지 조건이 참이되어야 실행되는데
  // // 앞의 조건이 거짓이면, 뒤에 조건은 무시함
  // const name = "김경태";
  // return (
  //   <>
  //     {name === "김경태" && <h1>김경태가 맛다</h1>}
  //   </>
  // );
  // ================================================================================================
  // && 2가지 조건이 참이되어야 실행되는데
  // 앞의 조건이 거짓이면, 뒤에 조건은 무시함
  // const num = 0;
  // return <>{num && <h1>김경태가 맛다</h1>}</>;
  // truthy, falsy
  // 조건에서 false -> null 인식.
  // 주의사항 : 0은 예외적으로 화면에 나타남.
  // ================================================================================================
  // undefined 형이 있음
  // 사소한 문법은 문법 검사기를 최대한 이용하면됨.
  // undefined 렌더링 안하기
  // 대책: ||(or 연산자)를 이용해서, 체크
  // const name = undefined;
  // return name || '값이 undefined 입니다.';
  // ================================================================================================
  // 인라인 스타일링
  // 스타일 css 속성 중에서 예) 배경화면 색을 의미하는속성 . background-color 사용이 되었는데
  // JSX 안에서 스타일링 할 때  styled component 라는 것을 이용하면 좀 더 쉽게 스타일이 됨.
  // const name = '김경태';
  // //스타일 정의해서 사용했고,
  // //바로 사용도 가능함,
  // const style = {
  //   backgroundColor: 'black',
  //   color: 'yellow',
  //   fontSize: '50px',
  // };
  // return <div style={style}>{name}</div>;
  // ================================================================================================
  // 태그안에  스타일 바로 넣기
  // const name = '김경태';
  // return (
  //   <div
  //     style={{
  //       backgroundColor: 'black',
  //       color: 'yellow',
  //       fontSize: '50px',
  //     }}
  //   >
  //     {name}
  //     <div className="reactTest">김경태2</div>
  //     {/* 클래스 명을 정해서 App.css로 가서 설정도 가능 */}
  //   </div>
  // );
  // ================================================================================================
  // 반드시 닫아야 하는 태그 , input
  // <div>
  //   <form>
  //     이름 : <br></br>
  //     <input />
  //   </form>
  // </div>;
  // ================================================================================================
  // 주석달기
  //   <div>
  //     {/* JSX에서의 기본 주석 모양 */}
  //     {/* ide 주석 하고싶다 Ctrl + / 보통 자동으로 주석 처리*/}
  // </div>;
  // ================================================================================================
} // App의 끝

export default App;